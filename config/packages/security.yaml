security:
  # https://symfony.com/doc/current/security.html#c-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    app_discord_user_provider:
      entity:
        class: App\Domain\User\Entity\DiscordUser
        property: email
    app_internal_user_provider:
      entity:
        class: App\Domain\User\Entity\InternalUser
        property: email
    app_provider:
      chain:
        providers: [ 'app_internal_user_provider', 'app_discord_user_provider' ]

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: app_provider
      remember_me:
        secret: '%kernel.secret%'
        lifetime: 604800 # 1 week in seconds
        path: /
        always_remember_me: true
      entry_point: App\Http\Security\InternalAuthenticator
      custom_authenticators:
        - App\Http\Security\DiscordAuthenticator
        - App\Http\Security\InternalAuthenticator

      form_login:
        # "login" is the name of the route created previously
        login_path: login
      logout:
        path: logout

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/work, roles: [ ROLE_WORK ] }

    - { path: ^/login, roles: [ PUBLIC_ACCESS ] }
    - { path: ^/legal, roles: [ PUBLIC_ACCESS ] }
    - { path: ^/push/send, roles: [ PUBLIC_ACCESS ] }
    - { path: ^/, roles: [ ROLE_USER ] }
